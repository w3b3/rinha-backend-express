services:
#  docker compose logs -f
    api_1: &api
        container_name: api_1
        hostname: api_1
        image: node:20-alpine3.19
        environment: &env
            APP_PORT: 1236
            DB_HOST: db
            DB_PASSWORD: postgres
            DB_PORT: 5432
            #            DB_USER: postgres
#        expose:
#            -   1234
        ports:
            - 1236:1234
        deploy:
# only applicable in swarm mode
#            replicas: 2
            resources:
                limits:
                    cpus: '0.25'
                    memory: '0.5GB'
            restart_policy:
                condition: on-failure
        volumes:
            - .:/app
        working_dir: /app
#        build: .
        command: sh -c "npm install && npm start"
        depends_on:
            - db
        networks:
            - rinha-002
    api_2:
        <<: *api
        container_name: api_2
        hostname: api_2
        environment:
            <<: *env
            APP_PORT: 1237
        ports:
            - 1237:1234
    db:
        container_name: db
        image: postgres
        environment:
            DB_PORT: 1235
            POSTGRES_PASSWORD: postgres
            PGDATA: /var/lib/postgresql/data/pgdata
        ports:
            - 1235:5432
        volumes:
            - db-data:/var/lib/postgresql/data
            - ./init-scripts:/docker-entrypoint-initdb.d

        networks:
            - rinha-002
    load-balancer:
        image: nginx:latest
        ports:
            - "1234:1234"
#            - "1235:1235"
#            - "1236:1236"
#            - "1237:1237"
        volumes:
            - ./nginx.conf:/etc/nginx/nginx.conf:ro
        depends_on:
            - api_1
            - api_2
#        deploy:
#            replicas: 1
#            placement:
#                constraints:
#                    - node.role == worker
        networks:
            - rinha-002
networks:
    rinha-002:
        name: rinha-002
volumes:
    db-data:
        name: db-data
